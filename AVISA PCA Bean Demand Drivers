library(tidyverse)
#==========================================================================
df_raw_fbal_1 <- read.csv("FAO Data/FoodBalanceSheetsHistoric_E_All_Data.csv", stringsAsFactors = F)
df_raw_fbal_1 <- subset(df_raw_fbal_1, Item.Code != 2928)
df_raw_fbal_2 <- read.csv("FAO Data/FoodBalanceSheets_E_All_Data.csv", stringsAsFactors = F)
df_raw_fbal_2 <- subset(df_raw_fbal_2, Item.Code != 2928)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code")
rm_cols <- which(colnames(df_raw_fbal_1) %in% rm_cols)
df_raw_fbal_1 <- df_raw_fbal_1[, -rm_cols]
df_raw_fbal_2 <- df_raw_fbal_2[, -rm_cols]
df_raw_fbal <- merge(df_raw_fbal_1, df_raw_fbal_2, by = c("Area", "Item", "Element", "Unit"))
df_raw_fbal$Item <- as.character(df_raw_fbal$Item)
df_raw_fbal$Element <- as.character(df_raw_fbal$Element)
df_raw_fbal$Area <- as.character(df_raw_fbal$Area)
u <- colnames(df_raw_fbal)
df_raw_fbal <- df_raw_fbal[, -grep("F", u)]
v <- colnames(df_raw_fbal)[5:ncol(df_raw_fbal)]
colnames(df_raw_fbal)[5:ncol(df_raw_fbal)] <- gsub("Y", "", v)
df_raw_fbal <- gather(df_raw_fbal,Year,Value,`1961`:`2017`)
#------------------------------------------------------------------------
#unique(df_raw_fbal$Item)
#unique(df_raw_fbal$Item)[grep("sukuma", unique(df_raw_fbal$Item), ignore.case = T)]
#unique(df_raw_fbal$Item)[grep("grand", unique(df_raw_fbal$Item), ignore.case = T)]
# "Sugar & Sweeteners" contains c("Sugar non-centrifugal", "Sweeteners, Other",
# "Sugar (Raw Equivalent)", "Honey")
# FnV_vec <- c("Vegetal Products", "Sweeteners, Other",
#              "Sugar non-centrifugal", "Honey", "Sugar cane")
item_vec <- c("Starchy Roots",
              "Cereals - Excluding Beer",
              "Animal Products",
              "Pulses",
              "Sugar & Sweeteners",
              "Oilcrops",
              "Fruits - Excluding Wine",
              "Vegetables",
              "Grand Total")
#unique(df_raw_fbal$Element)
element_vec <- c("Food supply (kcal/capita/day)")
df_fbal <- subset(df_raw_fbal, Item %in% item_vec &
                    Element %in% element_vec)
df_fbal$Item[grep("Cereals", df_fbal$Item)] <- "Cereals"
df_fbal$Item[grep("Vegetables", df_fbal$Item)] <- "Fruits/Veg."
df_fbal$Item[grep("Fruits", df_fbal$Item)] <- "Fruits/Veg."
df_fbal <- df_fbal %>% group_by(Area, Year, Item) %>% summarise(Value = mean(Value, na.rm = T))
#---------------------------------------------------------------------------
# Create kcal share variable
df_kcalTot <- subset(df_fbal, Item == "Grand Total")
df_kcalTot$Item <- NULL
colnames(df_kcalTot)[ncol(df_kcalTot)] <- "Grand Total"
df_fbal <- subset(df_fbal, Item != "Grand Total")
df_fbal <- merge(df_fbal, df_kcalTot, by = c("Area", "Year"))
df_fbal$`kcal share` <- df_fbal$Value / df_fbal$`Grand Total`
colnames(df_fbal)
# Get "Other" category
df_other <- df_fbal[, c("Area", "Year", "Item", "kcal share")]
df_other <- df_other %>% spread(Item, `kcal share`)
df_other$Other <- 1 - rowSums(df_other[, -c(1:2)])
df_other <- merge(df_other, df_kcalTot, by = c("Area", "Year"))
keep_cols <- c("Area", "Year", "Other", "Grand Total")
df_other <- df_other[, keep_cols]
colnames(df_other)[3] <- "kcal share"
df_other$Value <- df_other$`kcal share` * df_other$`Grand Total`
df_other$Item <- "Other"
col_order <- c("Area", "Year", "Item", "Value", "Grand Total", "kcal share")
df_other <- df_other[, col_order]
df_fbal <- rbind(df_fbal, df_other)
colnames(df_fbal)[4] <- "kcal/capita/day"
# Create pct diff
df_fbal_diff <- subset(df_fbal[, c("Area", "Year", "Item", "kcal/capita/day")],
                       Year %in% c(2013, 2017))
df_fbal_diff <- df_fbal_diff %>% group_by(Area, Item) %>%
  mutate(`kcal/capita/day pct. chng.` = 100 * diff(`kcal/capita/day`) / `kcal/capita/day`[1]) %>%
  as.data.frame()
df_fbal_diff$`kcal/capita/day` <- NULL
df_fbal_diff <- subset(df_fbal_diff, Year == 2017)
df_fbal_diff$Year <- NULL
df_fbal_diff <- df_fbal_diff %>% spread(Item, `kcal/capita/day pct. chng.`)

fn_na_count <- function(x){n_na <- length(which(is.na(x))); return(n_na)}
fn_inf_count <- function(x){n_inf <- length(which(is.infinite(x))); return(n_inf)}
check_na <- apply(df_fbal_diff[, -1], 2, fn_na_count)
check_inf <- apply(df_fbal_diff[, -1], 2, fn_inf_count)
df_fbal_diff <- df_fbal_diff[which(!is.na(df_fbal_diff$Pulses)), ]
df_fbal_diff <- df_fbal_diff[which(!is.infinite(df_fbal_diff$Pulses)), ]
df_fbal_diff <- df_fbal_diff[which(!is.na(df_fbal_diff$Oilcrops)), ]
#-------------------------------------------------------------------------
# Visually inspect
area_vec <- c("Kenya", "Uganda", "Ethiopia", "United Republic of Tanzania")
df_plot <- subset(df_fbal, Area %in% area_vec &
                    Year > 1992)
df_plot$Year <- as.integer(df_plot$Year)
yr_min <- min(df_plot$Year)
yr_max <- max(df_plot$Year)
n <- length(unique(df_plot$Item))
bag_of_colors <- randomcoloR::distinctColorPalette(k = 2 * n)
color_vec <- sample(bag_of_colors, n)
#good_colors <- c("#B346E2", "#74B4D0", "#E16953", "#D6E1D8", "#C7E84D", "#6BE47C", "#E4B64D")
#color_vec <- good_colors
df_plot <- df_plot %>% group_by(Area, Item) %>%
  mutate(mu_food_area_item = mean(`kcal share`, na.rm = T)) %>%
  as.data.frame()
df_plot$Item <- factor(df_plot$Item,
                       levels = unique(df_plot$Item[order(df_plot$mu_food_area_item, df_plot$Item, decreasing = T)]),
                       ordered = T)
gg <- ggplot(df_plot, aes(x = Year, y = `kcal share`, fill = Item))
gg <- gg + geom_area(position = "stack")
gg <- gg + scale_x_continuous(breaks = seq(yr_min, yr_max, length.out = 4))
gg <- gg + scale_fill_manual(values = color_vec)
gg <- gg + facet_wrap(~Area, ncol = 2, scales = "free")
gg <- gg + labs(caption = "Source: FAO")
gg <- gg + theme(legend.title = element_blank())
gg
#-------------------------------------------------------------------------
df_fbal <- subset(df_fbal, Year == 2017)
df_fbal <- df_fbal %>% group_by(Area, Item) %>%
  mutate(`kcal/capita/day pct. diff.` = diff(`kcal/capita/day`) / `kcal/capita/day`)
  
df_fbal_kcal <- df_fbal[, c("Area", "Item", "kcal/capita/day")]
df_fbal_kcalShare <- df_fbal[, c("Area", "Item", "kcal share")]
df_fbal_kcalTot <- df_fbal[-which(duplicated(df_fbal$`Grand Total`)), c("Area", "Grand Total")]
colnames(df_fbal_kcalTot)[2] <- "kcal/capita/day Total"
#---
df_fbal_kcal <- df_fbal_kcal %>% spread(Item, `kcal/capita/day`)
colnames(df_fbal_kcal)[-1] <- paste("kcal/capita/day", colnames(df_fbal_kcal)[-1])
df_fbal_kcal <- df_fbal_kcal[which(!is.na(df_fbal_kcal$`kcal/capita/day Pulses`)), ]
df_fbal_kcal <- df_fbal_kcal[which(!is.na(df_fbal_kcal$`kcal/capita/day Other`)), ]
df_fbal_kcalShare <- df_fbal_kcalShare %>% spread(Item, `kcal share`)
colnames(df_fbal_kcalShare)[-1] <- paste("kcal share", colnames(df_fbal_kcalShare)[-1])
df_fbal_kcalShare <- df_fbal_kcalShare[which(!is.na(df_fbal_kcalShare$`kcal share Pulses`)), ]
df_fbal_kcalShare <- df_fbal_kcalShare[which(!is.na(df_fbal_kcalShare$`kcal share Other`)), ]
df_fbal <- plyr::join_all(list(df_fbal_kcal, df_fbal_kcalShare, df_fbal_kcalTot))
# df_fbal <- merge(df_fbal_kcal, df_fbal_kcalShare, by = "Area")
# df_fbal <- merge(df_fbal, df_fbal_kcalTot)
fbalCols_kcal <- c(colnames(df_fbal_kcal), colnames(df_fbal_kcalTot)[2])
fbalCols_kcalShare <- colnames(df_fbal_kcalShare)
#=======================================================================
# Define function to plot covariance/correlation matrices
plot_covmat <- function(covmat, fig_title = "Covariance Matrix", graph_on = T){
  covmat[upper.tri(covmat)] <- NA
  df_plot <- covmat %>% tbl_df()
  these_levels <- colnames(df_plot)
  df_plot$ItemX <- colnames(df_plot)
  gathercols <- colnames(df_plot)[-ncol(df_plot)]
  df_plot <- df_plot %>% gather_("ItemY", "Value", gathercols)
  df_plot$ItemX <- factor(df_plot$ItemX, levels = these_levels)
  df_plot$ItemY <- factor(df_plot$ItemY, levels = these_levels)
  
  #midpoint <- min(covmat) + (max(covmat) - min(covmat)) / 2
  midpoint <- 0
  gg <- ggplot(df_plot, aes((ItemX), (ItemY)))
  gg <- gg + geom_tile(aes(fill = Value))#, width = 4, height = 4)
  gg <- gg + geom_text(aes(label = round(Value, 2)), size = 3.3)
  if(!is.null(fig_title)){
    gg <- gg + labs(title = fig_title)
  }
  gg <- gg + theme_bw()
  gg <- gg + theme(axis.text.x = element_text(size = 11, angle = 60, hjust = 1),
                   axis.text.y = element_text(size = 11),
                   axis.title = element_blank(),
                   legend.title = element_blank(),
                   plot.title = element_text(face = "bold", size = 8))
  gg <- gg + scale_fill_gradient2(low = "khaki", mid = "cyan", high = "magenta", midpoint, na.value = "white")
  if(graph_on){print(gg)}
  return(gg)
  
}

df_datcormat <- df_fbal_diff[, -1]
df_datcormat[df_datcormat == 0] <- 1
df_ldatcormat <- log(df_datcormat)
cormat <- cor(df_datcormat)
plot_covmat(cormat, fig_title = "Correlation Matrix")
PerformanceAnalytics::chart.Correlation(df_datcormat, histogram=TRUE, pch=19)
#============================================================================
#============================================================================
rm(df_raw_fbal_1, df_raw_fbal_2, df_raw_fbal, df_other, df_kcalTot,
   df_fbal_kcal, df_fbal_kcalShare, df_fbal_kcalTot, df_plot); gc()
#============================================================================
#============================================================================
#============================================================================
# Get producer price for major food groups
df_raw_pPrice <- read.csv("FAO Data/Prices_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code", "Months.Code")
rm_cols <- which(colnames(df_raw_pPrice) %in% rm_cols)
df_raw_pPrice <- df_raw_pPrice[, -rm_cols]
df_raw_pPrice$Item <- as.character(df_raw_pPrice$Item)
df_raw_pPrice$Element <- as.character(df_raw_pPrice$Element)
df_raw_pPrice$Area <- as.character(df_raw_pPrice$Area)
u <- colnames(df_raw_pPrice)
df_raw_pPrice <- df_raw_pPrice[, -grep("F", u)]
v <- colnames(df_raw_pPrice)[5:ncol(df_raw_pPrice)]
colnames(df_raw_pPrice)[5:ncol(df_raw_pPrice)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw_pPrice)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(1991:2018))
df_raw_pPrice <- gather_(df_raw_pPrice, "Year", "Value", gather_cols = available_yrs)
#---------------------------------------------------------------------------
#unique(df_raw_pPrice$Element)
#unique(df_raw_pPrice$Item)[grep("total", unique(df_raw_pPrice$Item), ignore.case = T)]
item_vec <- c("Sugar cane", "Pulses, Total", "Roots and Tubers, Total",
              "Cereals, Total", "Oilcrops, Oil Equivalent",
              "Vegetables Primary", "Meat, Total", "Milk, Total",
              "Fruit excl Melons, Total")
df_pPrice <- subset(df_raw_pPrice, Item %in% item_vec &
                          Element == "Producer Price Index (2014-2016 = 100)")
df_pPrice <- df_pPrice[which(!is.na(df_pPrice$Value)), ]
df_pPrice <- df_pPrice %>% group_by(Area, Item) %>%
  mutate(n_yrs = length(Value)) %>% as.data.frame()
#unique(df_pPrice$n_yrs)
# length(unique(df_pPrice$Area[which(df_pPrice$n_yrs > 3)]))
df_pPrice <- subset(df_pPrice, n_yrs > 3)
df_pPrice <- subset(df_pPrice, Year > 2012)
df_pPrice <- df_pPrice %>% group_by(Area) %>%
  mutate(mu_price = mean(Value, na.rm = T),
         sd_price =sd(Value, na.rm = T)) %>%
  as.data.frame()
df_pPrice$cv_price <- df_pPrice$sd_price / df_pPrice$mu_price
# df_pPrice <- subset(df_pPrice, Year %in% c(2013, 2017))
# df_pPrice <- df_pPrice %>% group_by(Area, Item) %>%
#   mutate(`Prod. Price Pct. Chng.` = diff(Value)) %>%
#   as.data.frame()
df_pPrice <- df_pPrice[-which(duplicated(df_pPrice$cv_price)), c("Area", "mu_price", "cv_price")]
# hist(df_pPrice$cv_price)
# hist(df_pPrice$mu_price)
colnames(df_pPrice)[2:3] <- c("Prod. Price Index\n(Avg. 2016-2018)", "Prod. Price Volatility (CV)")
#============================================================================
rm(df_raw_pPrice); gc()
#============================================================================
#============================================================================
#============================================================================
# Get consumer food price volatility
df_raw_foodCPI <- read.csv("FAO Data/ConsumerPriceIndices_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Area.Code", "Item.Code", "Months.Code")
rm_cols <- which(colnames(df_raw_foodCPI) %in% rm_cols)
df_raw_foodCPI <- df_raw_foodCPI[, -rm_cols]
#unique(df_raw_foodCPI$Item)
df_raw_foodCPI$Item <- as.character(df_raw_foodCPI$Item)
df_raw_foodCPI$Area <- as.character(df_raw_foodCPI$Area)
u <- colnames(df_raw_foodCPI)
df_raw_foodCPI <- df_raw_foodCPI[, -grep("F", u)]
u <- colnames(df_raw_foodCPI)
df_raw_foodCPI <- df_raw_foodCPI[, -grep("N", u)]
v <- colnames(df_raw_foodCPI)[5:ncol(df_raw_foodCPI)]
colnames(df_raw_foodCPI)[5:ncol(df_raw_foodCPI)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw_foodCPI)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(2000:2020))
df_raw_foodCPI <- gather_(df_raw_foodCPI, "Year", "Value", gather_cols = available_yrs)
df_raw_foodCPI$Unit <- NULL
#---------------------------------------------------------------------------
year_vec <- as.character(c(2010:2020))
df_foodCPI <- subset(df_raw_foodCPI, Item == "Consumer Prices, Food Indices (2010 = 100)" &
                       Year %in% year_vec)
df_foodCPI <- df_foodCPI[which(!is.na(df_foodCPI$Value)), ]
#---------------------------------------------------------------------------
# Select year for CPI
# df_check <- subset(df_foodCPI, Year == "2018")
# df_check <- df_check %>% group_by(Area) %>%
#   mutate(n_months = length(Value)) %>% as.data.frame()
# unique(df_check$n_months)
# length(unique(df_check$Area[which(df_check$n_months > 8)]))
this_year <- "2018"
#---------------------------------------------------------------------------
df_foodCPI <- subset(df_foodCPI, Year == this_year)
df_foodCPI <- df_foodCPI %>% group_by(Area) %>%
  mutate(n_months = length(Value)) %>% as.data.frame()
#unique(df_foodCPI$n_months)
df_foodCPI <- subset(df_foodCPI, n_months > 8)
df_foodCPI$Year <- NULL
df_foodCPI$n_months <- NULL
df_foodCPI <- df_foodCPI %>% group_by(Area) %>% 
  mutate(CV = sd(Value, na.rm = T) / mean(Value, na.rm = T)) %>%
  as.data.frame()
df_foodCPI <- df_foodCPI[-which(duplicated(df_foodCPI$CV)), ]
df_foodCPI <- df_foodCPI[, c("Area", "CV")]
# length(unique(df_foodCPI$Area))
# unique(df_foodCPI$Item)
colnames(df_foodCPI)[2] <- paste("Food CPI Volatility (CV)", this_year)
#============================================================================
rm(df_raw_foodCPI); gc()
#============================================================================
#============================================================================
#============================================================================
# Macroeconomic indicators, GDP/capita, etc.
df_raw_macro <- read.csv("FAO Data/Macro-Statistics_Key_Indicators_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code")
rm_cols <- which(colnames(df_raw_macro) %in% rm_cols)
df_raw_macro <- df_raw_macro[, -rm_cols]
#unique(df_raw_macro$Item)
df_raw_macro$Item <- as.character(df_raw_macro$Item)
df_raw_macro$Area <- as.character(df_raw_macro$Area)
u <- colnames(df_raw_macro)
df_raw_macro <- df_raw_macro[, -grep("F", u)]
u <- colnames(df_raw_macro)
df_raw_macro <- df_raw_macro[, -grep("N", u)]
v <- colnames(df_raw_macro)[5:ncol(df_raw_macro)]
colnames(df_raw_macro)[5:ncol(df_raw_macro)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw_macro)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(1970:2018))
df_raw_macro <- gather_(df_raw_macro, "Year", "Value", gather_cols = available_yrs)
#df_raw_macro$Unit <- NULL
#---------------------------------------------------------------------------
#unique(df_raw_macro$Item)
#year_vec <- as.character(c(2015:2018))
year_vec <- as.character(c(2014, 2018))
item_vec <- c("Gross Domestic Product per capita",
              #"Gross Fixed Capital Formation",
              "Value Added (Agriculture, Forestry and Fishing)",
              #"Value Added (Manufacture of food and beverages)",
              #"Value Added (Agriculture)",
              "Value Added (Total Manufacturing)")
this_element <- "Value US$, 2015 prices"
df_macro <- subset(df_raw_macro, Item %in% item_vec &
                       Year %in% year_vec &
                     Element == this_element)
# df_macro<- df_macro %>% group_by(Area, Item) %>%
#   summarise(Value = mean(Value, na.rm = T))
df_macro <- df_macro %>% group_by(Area, Element, Item) %>%
  mutate(`Value Pct. Chng.` = 100 * diff(Value) / Value[1]) %>%
  as.data.frame()
df_macro <- subset(df_macro, Year == 2018)
df_macro$Year <- NULL
df_macro$Element <- NULL
df_macro$Value <- NULL
df_macro$Unit <- NULL
#df_macro <- df_macro %>% spread(Item, Value)
df_macro <- df_macro %>% spread(Item, `Value Pct. Chng.`)
apply(df_macro, 2, fn_na_count)
apply(df_macro, 2, fn_inf_count)
df_macro <- df_macro[which(!is.na(df_macro$`Gross Domestic Product per capita`)), ]
df_macro <- df_macro[which(!is.na(df_macro$`Value Added (Agriculture, Forestry and Fishing)`)), ]
#============================================================================
rm(df_raw_macro); gc()
#============================================================================
#============================================================================
#============================================================================
# Get rural and urban population
df_raw_pop <- read.csv("FAO Data/Population_rural_urban.csv", stringsAsFactors = F)
keep_cols <- c("Area", "Element", "Year", "Unit", "Value")
df_raw_pop <- df_raw_pop[, keep_cols]
#---------------------------------------------------------------------------
# Check available years
#unique(df_raw_pop$Year)
#---------------------------------------------------------------------------
these_years <- c(2014, 2018)
df_pop <- subset(df_raw_pop, Year %in% these_years)
df_pop <- df_pop %>% spread(Element, Value)
df_pop$`Urban/Rural Pop.` <- df_pop$`Urban population` / df_pop$`Rural population`
df_pop <- df_pop %>% group_by(Area) %>%
  mutate(`Pop. Pct. Chng` = 100 * diff(`Total Population - Both sexes`) / `Total Population - Both sexes`[1],
         `Urban/Rural Pop. Change` = diff(`Urban/Rural Pop.`)) %>%
  as.data.frame()
df_pop <- subset(df_pop, Year == 2018)
df_pop <- df_pop[, c("Area", "Urban/Rural Pop.", "Urban/Rural Pop. Change", "Pop. Pct. Chng")]
#colnames(df_pop)
apply(df_pop, 2, fn_na_count)
apply(df_pop, 2, fn_inf_count)
df_pop <- df_pop[which(!is.na(df_pop$`Urban/Rural Pop. Change`)), ]
#============================================================================
rm(df_raw_pop); gc()
#============================================================================
#============================================================================
#============================================================================
# Employment indicators
# df_raw_labor <- read.csv("FAO Data/Employment_Indicators_E_All_Data.csv", stringsAsFactors = F)
# rm_cols <- c("Area.Code", "Source.Code", "Indicator.Code", "FAO.Source")
# rm_cols <- which(colnames(df_raw_labor) %in% rm_cols)
# df_raw_labor <- df_raw_labor[, -rm_cols]
# #unique(df_raw_labor$Item)
# df_raw_labor$Indicator <- as.character(df_raw_labor$Indicator)
# df_raw_labor$Area <- as.character(df_raw_labor$Area)
# u <- colnames(df_raw_labor)
# df_raw_labor <- df_raw_labor[, -grep("F", u)]
# u <- colnames(df_raw_labor)
# df_raw_labor <- df_raw_labor[, -grep("N", u)]
# v <- colnames(df_raw_labor)[4:ncol(df_raw_labor)]
# colnames(df_raw_labor)[4:ncol(df_raw_labor)] <- gsub("Y", "", v)
# #---------------------------------------------------------------------------
# # Check available years
# #colnames(df_raw_labor)
# #---------------------------------------------------------------------------
# available_yrs <- as.character(c(1947:2019))
# df_raw_labor <- gather_(df_raw_labor, "Year", "Value", gather_cols = available_yrs)
# #df_raw_labor$Unit <- NULL
# #---------------------------------------------------------------------------
# #unique(df_raw_labor$Indicator)
# this_year <- 2018
# indicator_vec <- c("Labour force participation rate, rural areas",
#                    #"Employment-to-population ratio, rural areas",
#                    #"Share of employees in agriculture (% of total employees)",
#                    #"Share of employment in agriculture (% of total employment)",
#                    "Employment in agriculture")
#                    #"Agriculture value added per worker (US$, 2010 prices)")
# df_labor <- subset(df_raw_labor, Indicator %in% indicator_vec &
#                      Year == this_year)
# df_labor$Unit <- NULL
# df_labor$Year <- NULL
# df_labor <- df_labor %>% spread(Indicator, Value)
# u <- df_labor$`Labour force participation rate, rural areas`
# unique(df_labor$Area[which(!is.na(u))])
# # Not enough observations -- none in Africa
# #============================================================================
# rm(df_raw_labor); gc()
#============================================================================
#============================================================================
#============================================================================
# Get DFA
df_raw_dfa <- read.csv("FAO Data/Development_Assistance_to_Agriculture_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Donor.Code", "Recipient.Country.Code",
             "Item.Code", "Element.Code", "Purpose.Code")
rm_cols <- which(colnames(df_raw_dfa) %in% rm_cols)
df_raw_dfa <- df_raw_dfa[, -rm_cols]
#unique(df_raw_dfa$Item)
df_raw_dfa$Item <- as.character(df_raw_dfa$Item)
df_raw_dfa$Area <- as.character(df_raw_dfa$Area)
u <- colnames(df_raw_dfa)
df_raw_dfa <- df_raw_dfa[, -grep("F", u)]
u <- colnames(df_raw_dfa)
df_raw_dfa <- df_raw_dfa[, -grep("N", u)]
v <- colnames(df_raw_dfa)[7:ncol(df_raw_dfa)]
colnames(df_raw_dfa)[7:ncol(df_raw_dfa)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw_dfa)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(1973:2018))
df_raw_dfa <- gather_(df_raw_dfa, "Year", "Value", gather_cols = available_yrs)
#df_raw_dfa$Unit <- NULL
#---------------------------------------------------------------------------
#unique(df_raw_dfa$Item)
#unique(df_raw_dfa$Element)
#unique(df_raw_dfa$Donor)
this_year <- 2018
this_item <- "Commitment ODA"
this_purpose <- "Agriculture"
this_element <- "Value US$"
this_donor <- "Bilateral Donors"
df_dfa <- subset(df_raw_dfa, Item == this_item &
                     Year == this_year &
                   Purpose == this_purpose &
                   Element == this_element & Donor == this_donor)
df_dfa <- df_dfa[, c("Recipient.Country", "Value")]
df_dfa <- df_dfa[which(!is.na(df_dfa$Value)), ]
colnames(df_dfa) <- c("Area", paste("ODA Commitment\nAgriculture (millions USD)", this_year))
#============================================================================
rm(df_raw_dfa); gc()
#============================================================================
#============================================================================
#============================================================================
# Get trade indicators
df_raw_trade <- read.csv("FAO Data/Trade_Indices_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code")
rm_cols <- which(colnames(df_raw_trade) %in% rm_cols)
df_raw_trade <- df_raw_trade[, -rm_cols]
#unique(df_raw_trade$Item)
df_raw_trade$Item <- as.character(df_raw_trade$Item)
df_raw_trade$Area <- as.character(df_raw_trade$Area)
u <- colnames(df_raw_trade)
df_raw_trade <- df_raw_trade[, -grep("F", u)]
v <- colnames(df_raw_trade)[5:ncol(df_raw_trade)]
colnames(df_raw_trade)[5:ncol(df_raw_trade)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw_trade)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(1961:2017))
df_raw_trade <- gather_(df_raw_trade, "Year", "Value", gather_cols = available_yrs)
#unique(df_raw_trade$Element)
#df_raw_trade$Unit <- NULL
#---------------------------------------------------------------------------
#unique(df_raw_trade$Item)
#unique(df_raw_trade$Element)
these_years <- c("2013", "2017")
this_item <- "Agricult.Products, Total"
element_vec <- c("Import Unit/Value Index (2004-2006 = 100)",
                 "Export Unit/Value Index (2004-2006 = 100)")
df_trade <- subset(df_raw_trade, Element %in% element_vec &
                   Year %in% these_years &
                     Item == this_item)
df_trade$Unit <- NULL
df_trade <- df_trade %>% group_by(Area, Element) %>%
  mutate(`Value Change` = diff(Value)) %>%
  as.data.frame()
df_trade <- subset(df_trade, Year == 2017)
df_trade$Year <- NULL
df_trade <- df_trade[, c("Area", "Element", "Value Change")]
df_trade <- df_trade %>% spread(Element, `Value Change`)
colnames(df_trade)[2:3] <- c("Export Index Change", "Import Index Change")
df_trade <- df_trade[which(!is.na(df_trade$`Export Index Change`)), ]
df_trade <- df_trade[which(!is.na(df_trade$`Import Index Change`)), ]
#============================================================================
rm(df_raw_trade); gc()
#============================================================================
#============================================================================
#============================================================================
# Get land use indicators
df_raw_landUse <- read.csv("FAO Data/Inputs_LandUse_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code")
rm_cols <- which(colnames(df_raw_landUse) %in% rm_cols)
df_raw_landUse <- df_raw_landUse[, -rm_cols]
#unique(df_raw_landUse$Item)
df_raw_landUse$Item <- as.character(df_raw_landUse$Item)
df_raw_landUse$Area <- as.character(df_raw_landUse$Area)
u <- colnames(df_raw_landUse)
df_raw_landUse <- df_raw_landUse[, -grep("F", u)]
v <- colnames(df_raw_landUse)[5:ncol(df_raw_landUse)]
colnames(df_raw_landUse)[5:ncol(df_raw_landUse)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw_landUse)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(1961:2017))
df_raw_landUse <- gather_(df_raw_landUse, "Year", "Value", gather_cols = available_yrs)
#unique(df_raw_landUse$Element)
#df_raw_landUse$Unit <- NULL
#---------------------------------------------------------------------------
#unique(df_raw_landUse$Item)
#unique(df_raw_landUse$Element)
these_years <- c(2013, 2017)
this_element <- "Area"
item_vec <- c("Country area",
              "Cropland",
              "Agricultural land",
              "Land under permanent crops",
              "Forest land")#,
              # "Cropland area under conservation tillage",
              # "Cropland area under zero or no tillage",
              # "Land area actually irrigated")
df_landUse <- subset(df_raw_landUse, Element == this_element &
                     Year %in% these_years &
                     Item %in% item_vec)
df_landUse$Element <- NULL
df_landUse$Unit <- NULL
#df_landUse$Year <- NULL
df_landUse <- df_landUse %>% spread(Item, Value)

df_landUse$`Agricultural land (share)` <- df_landUse$`Agricultural land` / df_landUse$`Country area`
df_landUse$`Forest land (share)` <- df_landUse$`Forest land` / df_landUse$`Country area`
df_landUse$`Land under permanent crops (share)` <- df_landUse$`Land under permanent crops` / df_landUse$`Agricultural land`
df_landUse$`Agricultural land` <- NULL
df_landUse$`Country area` <- NULL
df_landUse$Cropland <- NULL
df_landUse$`Forest land` <- NULL
df_landUse$`Land under permanent crops` <- NULL
df_landUse <- subset(df_landUse, Year == 2017)
df_landUse$Year <- NULL
#============================================================================
rm(df_raw_landUse); gc()
#============================================================================
#============================================================================
# END DATA PREP
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
#============================================================================
# Define function to calculate variable-signal correlations
get_S_and_corrXS <- function(mat_X_in){
  # mat_P = eigenvectors of the data correlation matrix
  # mat_G = corresponding eigenvalues
  mat_X_centered <- scale(mat_X_in, scale = F)
  # out_svd <- svd(mat_X_centered)
  # sing_values <- out_svd$d
  # n_obs <- nrow(mat_X_centered)
  # eig_values <- sing_values^2 / (n_obs - 1)
  # mat_P <- out_svd$v
  
  #mat_P <- eigen(cov(mat_X_in))$vectors
  mat_P <- eigen(cor(mat_X_in))$vectors
  if(mean(mat_P[, 1]) < 0){mat_P <- -mat_P}
  #eig_values <- round(eigen(cov(mat_X_in))$values, 8)
  eig_values <- round(eigen(cor(mat_X_in))$values, 8)
  mat_G <- diag(eig_values)
  
  #mat_P_sigs <- mat_P[, 1:n_signals]
  # eig_values[1:n_signals] / eigen(cov(mat_X_centered))$values[1:n_signals] #check
  # mat_P / eigen(cov(mat_X_in))$vectors #check
  
  #mat_G <- diag(eig_values)
  
  #mat_G_sigs <- matU[, 1:n_signals]
  #---------------------------------------------
  # sd_X <- apply(mat_X_in, 2, sd)
  # D_sdX_inv <- diag(1 / sd_X)
  # cormat_XS <- D_sdX_inv %*% mat_P %*% sqrt(mat_G)
  cormat_XS <- mat_P %*% sqrt(mat_G)
  row.names(cormat_XS) <- colnames(mat_X_in)
  mat_L <- cormat_XS
  #mat_L <- diag(1 / apply(mat_X_in, 2, sd)) %*% mat_P %*% sqrt(mat_G)
  #---------------------------------------------------------
  # Set sign of eigenvectors such that signals best conform to their most highly correlated items
  # First have to get average of highest correlated items for each signal
  corrThresh <- 0.55
  n_items <- ncol(mat_L)
  list_X_hiCorr_avg <- list()
  for(i in 1:n_items){
    this_loadvec <- mat_L[, i]
    ind_tracks <- which(abs(this_loadvec) >= corrThresh)
    if(length(ind_tracks) == 0){
      ind_tracks <- which(abs(this_loadvec) == max(abs(this_loadvec)))
    }
    if(length(ind_tracks) == 1){
      list_X_hiCorr_avg[[i]] <- mat_X_centered[, ind_tracks]
    }else{
      loadvec_kept <- this_loadvec[ind_tracks]
      list_X_hiCorr_avg[[i]] <- rowMeans(mat_X_centered[, ind_tracks])
      
    }
  }
  mat_X_hiCorr_avg <- do.call(cbind, list_X_hiCorr_avg)
  mat_S_all <- mat_X_centered %*% mat_P
  #mat_S_all <- mat_X_in %*% mat_P
  for(i in 1:n_items){
    this_S <- mat_S_all[, i]
    this_X_hiCorr_avg <- mat_X_hiCorr_avg[, i]
    mse <- mean((this_S - this_X_hiCorr_avg)^2)
    mse_neg <- mean((-this_S - this_X_hiCorr_avg)^2)
    if(mse_neg < mse){
      mat_P[, i] <- -mat_P[, i]
    }
  }
  #cormat_XS <- D_sdX_inv %*% mat_P %*% sqrt(mat_G)
  cormat_XS <- mat_P %*% sqrt(mat_G)
  row.names(cormat_XS) <- colnames(mat_X_in)
  mat_L <- cormat_XS
  mat_S_all <- mat_X_centered %*% mat_P
  #---------------------------------------------
  # res <- FactoMineR::PCA(mat_pctDiff_in, scale.unit = F, ncp = ncol(mat_pctDiff_in), graph = F)
  # mat_L_FactoMiner <- res$var$coord
  # mat_L / mat_L_FactoMiner
  
  list_out <- list(mat_S_all, cormat_XS, eig_values, mat_P)
  return(list_out)
}
#====================================================
# Barchart of variable-signal correlations
plot_corrXS_barchart <- function(mat_L, group_info = NULL, xAxis_title = NULL, sigNames = NULL){
  
  n_signals <- ncol(mat_L)
  df_plot <- data.frame(Item = row.names(mat_L), mat_L)
  df_plot$Item <- as.character(df_plot$Item)
  #-------------------------------------------------------
  if(is.null(sigNames)){
    signal_id <- paste("Signal", 1:n_signals)
  }else{
    signal_id <- paste("Signal", 1:n_signals, "\n", sigNames)
  }
  colnames(df_plot)[2:(n_signals + 1)] <- signal_id
  #-------------------------------------------------------
  gathercols <- as.character(signal_id) 
  df_plot <- gather_(df_plot, "Signal", "Correlation", gathercols)
  df_plot <- transform(df_plot,
                       Signal = factor(Signal, levels = gathercols))
  
  if(!is.null(group_info)){
    outlist <- group_fn(group_info)
    cols_ordered_by_group <- outlist[[1]]
    group_color_vec <- outlist[[2]]
    group_vec_ordered <- outlist[[3]]
    df_match_group <- data.frame(Item = cols_ordered_by_group, Group = group_vec_ordered)
    df_plot <- merge(df_plot, df_match_group, by = "Item")
    df_plot <- df_plot[order(df_plot$Group), ]
    df_plot$Item <- factor(df_plot$Item, levels = unique(df_plot$Item))
    gg <- ggplot(df_plot, aes(x = Item, y = Correlation, fill = Group))
    gg <- gg + scale_fill_manual(values = unique(group_color_vec))
  }else{
    gg <- ggplot(df_plot, aes(x = Item, y = Correlation))
  }
  gg <- gg + geom_bar(stat = "identity", color = "black", position = "dodge")
  gg <- gg + ylim(limits = c(-1, 1))
  gg <- gg + facet_wrap(~ Signal, nrow = 1)
  if(!is.null(xAxis_title)){
    gg <- gg + labs(y = xAxis_title)
  }
  gg <- gg + theme(axis.text = element_text(size = 7),
                   axis.title.x = element_text(size = 7),
                   axis.title.y = element_blank(),
                   legend.title = element_blank(),
                   legend.text = element_text(size = 7),
                   strip.text = element_text(size = 7))
  gg <- gg + coord_equal()
  gg <- gg + coord_flip()
  gg
  
}
#=====================================================================
# Define function to order data by group
group_fn <- function(group_info){
  list_groups <- group_info[[1]]
  group_names <- group_info[[2]]
  group_colors <- group_info[[3]]
  varNames_ordered <- do.call(c, list_groups)
  n_groups <- length(group_names)
  n_items <- length(varNames_ordered)
  if(is.na(group_colors)){
    bag_of_colors <- randomcoloR::distinctColorPalette(k = 5 * n_groups)
    group_colors <- sample(bag_of_colors, n_groups)
    #group_colors <- viridis::viridis_pal(option = "D")(length(group_names))
  }
  #if(reverse_order){group_colors <- rev(group_colors)}
  #varNames_ordered <- colnames(mat_pctDiff)
  group_vec <- rep(NA, n_items)
  group_color_vec <- rep(NA, n_items)
  for(i in 1:n_groups){
    this_group_vec <- list_groups[[i]]
    this_group_name <- group_names[i]
    this_group_color <- group_colors[i]
    group_vec[which(varNames_ordered %in% this_group_vec)] <- this_group_name
    group_color_vec[which(varNames_ordered %in% this_group_vec)] <- this_group_color
  }
  ind_ordered_cols <- order(factor(group_vec))
  cols_ordered_by_group <- as.character(varNames_ordered[ind_ordered_cols])
  group_color_vec <- group_color_vec[ind_ordered_cols]
  group_vec_ordered <- group_vec[ind_ordered_cols]
  out_list <- list(cols_ordered_by_group, group_color_vec, group_vec_ordered, ind_ordered_cols, group_vec)
  return(out_list)
}
#group_info <- list(list_groups, group_names, group_colors)
#==========================================================================
#==========================================================================
#==========================================================================
#fbalCols_kcalShare
#fbalCols_kcal
these_fbalCols <- fbalCols_kcal
# this_df_fbal <- df_fbal[, these_fbalCols]
this_df_fbal <- df_fbal_diff
# if(length(grep("share", these_fbalCols)) == 0){
#   this_df_fbal$`kcal/capita/day Other` <- NULL
#   this_df_fbal$`kcal/capita/day Total` <- NULL
#   this_df_fbal[this_df_fbal == 0] <- 1
# }else{
#   this_df_fbal$`kcal share Other` <- NULL
#   this_df_fbal[this_df_fbal == 0] <- 0.001
# }
#this_df_fbal[, -1] <- log(this_df_fbal[, -1])
#this_df_fbal$`kcal share Other` <- NULL
#this_df_pPrice <- df_pPrice[, c("Area", "Prod. Price Volatility (CV)")]
this_df_pPrice <- df_pPrice
this_df_macro <- df_macro
nrow(this_df_fbal)
nrow(this_df_pPrice)
nrow(df_foodCPI)
nrow(df_pop)
nrow(this_df_macro)
#nrow(df_dfa)
nrow(df_trade)
nrow(df_landUse)

list_df <- list(df_foodCPI, this_df_fbal, this_df_pPrice,
                df_pop, this_df_macro, df_trade, df_landUse)
#list_df <- list(this_df_fbal, df_pop)
df <- plyr::join_all(list_df)
#df[, -1] <- log(df[, -1])
#exclude_vec <- c("Iran (Islamic Republic of)", "Indonesia")
#df <- subset(df, !(Area %in% exclude_vec))
#----------------------------------------------------------------------------
# Remove NA
apply(df, 2, fn_na_count)
df <- df[which(!is.na(df$`Prod. Price Volatility (CV)`)), ]
df <- df[which(!is.na(df$Pulses)), ]
df <- df[which(!is.na(df$`Land under permanent crops (share)`)), ]
df <- df[which(!is.na(df$`Forest land (share)`)), ]
df <- df[which(!is.na(df$`Export Index Change`)), ]
apply(df, 2, fn_inf_count)
venezuela_str <- df$Area[grep("Venezuela", df$Area)]
df <- subset(df, Area != venezuela_str)
#----------------------------------------------------------------------------
mat_X_in <- as.matrix(df[, -1])
row.names(mat_X_in) <- df$Area
#----------------------------------------------------------------------------
eig_values <- round(eigen(cor(mat_X_in))$values, 8)
c_vec <- eig_values / sum(eig_values)
ck_vec <- cumsum(c_vec)
df_plot <- data.frame(Signal = paste("Signal", 1:length(eig_values)), Portion_explained = c_vec, Portion_explained_cumul = ck_vec)
colnames(df_plot)[2:3] <- c("Individually", "Cumulatively")
gathercols <- colnames(df_plot)[2:3]
df_plot <- gather_(df_plot, "Portion explained", "Value", gathercols)
df_plot$Signal <- factor(df_plot$Signal,
                         levels = unique(df_plot$Signal),
                         ordered = T)
gg <- ggplot(df_plot, aes(x = Signal, y = Value, fill = `Portion explained`))
gg <- gg + geom_bar(stat = "identity", color = "black", position = "dodge")
gg <- gg + scale_fill_manual(values = c("wheat3", "paleturquoise"))
gg <- gg + geom_hline(yintercept = 0.9, color = "coral", size = 1, linetype = "dashed")
gg <- gg + theme(axis.text.y = element_text(size = 7),
                 axis.text.x = element_text(size = 7, angle = 60, hjust = 1),
                 axis.title = element_blank(),
                 legend.title = element_text(size = 8),
                 legend.text = element_text(size = 8))

gg
#----------------------------------------------------------------------------
n_signals <- which(ck_vec > 0.9)[1]
n_signals
#----------------------------------------------------------------------------
list_out <- get_S_and_corrXS(mat_X_in)
mat_S_all <- list_out[[1]]
cormat_XS <- list_out[[2]]
eig_values <- list_out[[3]]
mat_P <- list_out[[4]]
mat_S <- mat_S_all[, 1:n_signals]
mat_L <- cormat_XS[, 1:n_signals]
fbal_vec <- colnames(this_df_fbal)[-1]
pop_vec <- colnames(df_pop[-1])
macro_vec <- c(colnames(df_macro)[-1])#, colnames(df_labor)[-1])
price_vec <- c(colnames(this_df_pPrice)[-1], colnames(df_foodCPI)[-1])
trade_vec <- colnames(df_trade)[-1]
landUse_vec <- colnames(df_landUse)[-1]
list_groups <- list(fbal_vec, pop_vec, macro_vec, price_vec, trade_vec, landUse_vec)
group_names <- c("Staple Demand", "Population", "Macroeconomic\nIndicators",
                 "Staple Price", "Trade", "Land Use")
n_groups <- length(group_names)
bag_of_colors <- randomcoloR::distinctColorPalette(k = 5 * n_groups)
group_colors <- sample(bag_of_colors, n_groups)
group_info <- list(list_groups, group_names, group_colors)
plot_corrXS_barchart(mat_L, group_info)
#------------------------------------------------------------------------
mat_Lrot <- varimax(mat_L)[[1]]
mat_Lrot <- matrix(as.numeric(mat_Lrot),
                   attributes(mat_Lrot)$dim,
                   dimnames = attributes(mat_Lrot)$dimnames)
mat_R <- varimax(mat_L)[[2]]
mat_R <- matrix(as.numeric(mat_R),
                attributes(mat_R)$dim,
                dimnames = attributes(mat_R)$dimnames)

xAxis_title <- "Varimax Rotated Correlation"
plot_corrXS_barchart(mat_Lrot, group_info, xAxis_title, sigNames = NULL)
#------------------------------------------------------------------------
# if(length(grep("share", these_fbalCols)) == 0){
#   rm_col <- which(colnames(mat_X_in) == "kcal/capita/day Pulses")
# }else{
#   rm_col <- which(colnames(mat_X_in) == "kcal share Pulses")
# }
mat_X_in2 <- mat_X_in[, -rm_col]
list_out <- get_S_and_corrXS(mat_X_in2)
mat_S_all2 <- list_out[[1]]
cormat_XS2 <- list_out[[2]]
eig_values2 <- list_out[[3]]
mat_P2 <- list_out[[4]]
#-------------------------------------------------------------------------
eig_values2 <- round(eigen(cor(mat_X_in2))$values, 8)
c_vec <- eig_values2 / sum(eig_values2)
ck_vec <- cumsum(c_vec)
df_plot <- data.frame(Signal = paste("Signal", 1:length(eig_values2)), Portion_explained = c_vec, Portion_explained_cumul = ck_vec)
colnames(df_plot)[2:3] <- c("Individually", "Cumulatively")
gathercols <- colnames(df_plot)[2:3]
df_plot <- gather_(df_plot, "Portion explained", "Value", gathercols)
df_plot$Signal <- factor(df_plot$Signal,
                         levels = unique(df_plot$Signal),
                         ordered = T)
gg <- ggplot(df_plot, aes(x = Signal, y = Value, fill = `Portion explained`))
gg <- gg + geom_bar(stat = "identity", color = "black", position = "dodge")
gg <- gg + scale_fill_manual(values = c("wheat3", "paleturquoise"))
gg <- gg + geom_hline(yintercept = 0.9, color = "coral", size = 1, linetype = "dashed")
gg <- gg + theme(axis.text.y = element_text(size = 7),
                 axis.text.x = element_text(size = 7, angle = 60, hjust = 1),
                 axis.title = element_blank(),
                 legend.title = element_text(size = 8),
                 legend.text = element_text(size = 8))

gg
#----------------------------------------------------------------------------
n_signals <- which(ck_vec > 0.9)[1]
n_signals
#----------------------------------------------------------------------------
mat_S2 <- mat_S_all2[, 1:n_signals]
mat_L2 <- cormat_XS2[, 1:n_signals]
#------------------------------------------------------------------------
mat_Lrot2 <- varimax(mat_L2)[[1]]
mat_Lrot2 <- matrix(as.numeric(mat_Lrot2),
                   attributes(mat_Lrot2)$dim,
                   dimnames = attributes(mat_Lrot2)$dimnames)
mat_R2 <- varimax(mat_L2)[[2]]
mat_R2 <- matrix(as.numeric(mat_R2),
                attributes(mat_R2)$dim,
                dimnames = attributes(mat_R2)$dimnames)

xAxis_title <- "Varimax Rotated Correlation"
plot_corrXS_barchart(mat_Lrot2, group_info, xAxis_title, sigNames = NULL)
#------------------------------------------------------------------------
mat_Srot2 <- mat_S2 %*% mat_R2
#mat_Srot2 <- mat_Srot2[, -ncol(mat_Srot2)]
if(length(grep("share", these_fbalCols)) == 0){
  df_mod <- data.frame(y = df$`kcal/capita/day Pulses`, mat_S2rot)
}else{
  df_mod <- data.frame(y = df$`kcal share Pulses`, mat_S2rot)
}
mod <- lm( y ~., data = df_mod, singular.ok = T)
summary(mod)
# car::vif(mod)
# alias(mod)
#colnames(mat_X_in)
out_PCA <- FactoMineR::PCA(mat_X_in)
factoextra::fviz_pca_biplot(out_PCA)
df_PCA <- df[, -1]
#df_PCA$`kcal share Fruits/Veg.` <- NULL
#df_PCA$`kcal share Animal Products` <- NULL
#df_PCA$`kcal share Other` <- NULL
mod_pcr <- pls::pcr(Pulses ~., data = df_PCA, scale = TRUE, validation = "CV")
summary(mod_pcr)
pls::predplot(mod_pcr)
pls::coefplot(mod_pcr)  
#pls::validationplot(mod_pcr)
#hist(df$`kcal/capita/day Pulses`)
#hist(df$`kcal share Pulses`)


cormat <- cor(df[, -1])
plot_covmat(cormat, fig_title = "Correlation Matrix")
PerformanceAnalytics::chart.Correlation(df[, -1], histogram=TRUE, pch=19)
